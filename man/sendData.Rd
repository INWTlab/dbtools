% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sendData.R
\name{sendData}
\alias{sendData}
\alias{sendData,CredentialsList,data.frame-method}
\alias{sendData,Credentials,data.frame-method}
\alias{sendData,DBIConnection,data.frame-method}
\alias{sendData,MySQLConnection,data.frame-method}
\alias{sendData,MariaDBConnection,data.frame-method}
\title{Copy data to database tables}
\usage{
sendData(db, data, table = deparse(substitute(data)), ...)

\S4method{sendData}{CredentialsList,data.frame}(db, data, table, ..., applyFun = lapply)

\S4method{sendData}{Credentials,data.frame}(db, data, table, chunkSize = Inf, ...)

\S4method{sendData}{DBIConnection,data.frame}(db, data, table = deparse(substitute(data)), ...)

\S4method{sendData}{MySQLConnection,data.frame}(db, data, table, ..., mode = "insert")

\S4method{sendData}{MariaDBConnection,data.frame}(db, data, table, ..., mode = "insert")
}
\arguments{
\item{db}{one in: \cr (\link{Credentials}) the credentials to get a
connection to a database.  \cr (DBIConnection)
\link[DBI]{DBIConnection-class} \cr (MySQLConnection)
\link[RMySQL]{MySQLConnection-class}}

\item{data}{A data.frame (or coercible to data.frame)}

\item{table}{A character string specifying a DBMS table name}

\item{...}{arguments passed to methods and to \link[dbtools]{reTry}}

\item{applyFun}{(function) something like lapply or mclapply}

\item{chunkSize}{An integer specifying the number of rows send to the db at
a time. Defaults to \code{Inf}.}

\item{mode}{One of "insert", "replace", or "truncate"}
}
\description{
These functions copy data frames to database tables
}
\details{
Basically, these functions are intended to behave like dbWriteTable.
However, there are two notebale exceptions:
\enumerate{
  \item append is always set to TRUE, i.e. the target database table must
  be created or already exist before sendData is called
  \item row.names is always set to FALSE, i.e., row.names must be converted
  to a variable if you want to keep them
}
There are four different modes for sending data to the database:
\describe{
  \item{insert}{INSERT INTO TABLE, i.e. in case of duplicates only the first
  entry will be kept}
  \item{replace}{REPLACE INTO TABLE, i.e. in case of duplicates only the last
  entry will be kept}
  \item{truncate}{like dbWriteTable with argument overwrite = TRUE, i.e., the
  table is truncated before sending the data}
  \item{update}{like insert but falls back to update on duplicate key}
}
}
